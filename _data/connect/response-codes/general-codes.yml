example-responses:
  string: &no-multiple-destinations-response-body "`an account can have at most one destination`"
  object: &existing-user-response-body |
    ```json
    {
      "code":"ExistingUser",
      "message":"This email address is already associated with an active user."
    }
    ```

all-codes:
  - code: "200"
    text: "OK"
    error: false
    description: "Success!"

  - code: "400"
    text: "Bad Request"
    error: true
    description: "The request is invalid, contains malformed data, or otherwise cannot be served. The reasons for invalid requests can vary by endpoint. An accompanying message will provide detail about the reason for failure."


# -------------------------- #
#   400 CONNECT API ERRORS   #
# -------------------------- #
    # connect-errors:
    # -------------------------- #
    #      ACCOUNT ENDPOINT      #
    # -------------------------- #
      # - endpoint: "accounts"
      #   errors:
      #     - method: "post"
      #       code: "ExistingUser"
      #       condition: "A Stitch account is already associated with the provided email address."
      #       response-body: *existing-user-response-body

      #     - method: "post"
      #       code: "BadRequest"
      #       condition: "Request body contains malformed data."
      #       response-body: |
      #         ```json
      #         {
      #           "code":"BadRequest",
      #           "message":"Invalid form data.",
      #           "errors":{}
      #         }
      #         ```

    # -------------------------- #
    #    DESTINATION ENDPOINT    #
    # -------------------------- #
      # - endpoint: "destinations"
      #   errors:
      #     - method: "post"
      #       condition: "Accounts can have one destination"
      #       response-body: *no-multiple-destinations-response-body

      #     - method: "post"
      #       condition: "Missing or prohibited arguments"
      #       version: "3"
      #       response-body: |
      #         `body must be a map with type = redshift, postgres, or snowflake. required-keys = type, connection`

      #     - method: "post"
      #       condition: "Missing or prohibited arguments"
      #       version: "4"
      #       response-body: |
      #         `POST body may only include a type and map of properties`

      #     - method: "put"
      #       condition: "Modifications to `type` are unsupported"
      #       response-body: |
      #         `this API endpoint does not support modifying destination type`

      #     - method: "put"
      #       condition: "Invalid destination ID"
      #       response-body: |
      #         `invalid connection id`

    # -------------------------- #
    #       SOURCE ENDPOINT      #
    # -------------------------- #
      # - endpoint: "sources"
      #   errors:
      #     - method: "post"
      #       condition: "Source's `display_name` is already in use"
      #       response-body: |
      #         `a source of name <NAME> already exists`

      #     - method: "post"
      #       condition: "Prohibited arguments"
      #       response-body: |
      #         `POST body may only include a type, a display_name and map of string properties`

      #     - method: "put"
      #       condition: "Invalid source ID"
      #       response-body: |
      #         `unable to locate source(<SOURCE_ID>) for client (<ACCOUNT_ID>) to update`

      #     - method: "put"
      #       condition: "Prohibited arguments"
      #       response-body: |
      #         `PUT body many only include the keys: display_name and properties`

      #     - method: "post, put"
      #       condition: "Invalid `properties` data"
      #       response-body: |
      #         An array of the `property` names containing invalid data:

      #         ```json
      #         {
      #            "bad_properties":[
      #               "start_date",
      #               "frequency_in_minutes"
      #            ],
      #            ...
      #         }
      #         ```

      #         May result from incorrect formatting, incorrect typing (all property values must be strings), or a property has a value that is an empty string.

  - code: "401"
    text: "Unauthorized"
    error: true
    description: "The request doesn't have a valid API access token. Verify your token is correct and re-try the request."

  - code: "404"
    text: "Not Found"
    error: true
    description: |
      Potential causes:

      - The URI requested is invalid
      - The requested resource, such as a specific source, doesn't exist
      - Method is not allowed by the endpoint

  - code: "500"
    text: "Internal Server Error"
    error: true
    description: &api-problems "The API is experiencing problems. Try again later."

  - code: "502"
    text: "Bad Gateway"
    error: true
    description: *api-problems